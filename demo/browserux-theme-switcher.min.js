!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";const t=document.createElement("template");t.innerHTML='\n<style>\n    :host,\n    :root {\n        --bux-switch-width: 40px;\n        --bux-switch-height: 24px;\n        --bux-switch-bg-color: #888;\n        --bux-switch-thumb-color: #fff;\n        --bux-switch-emoji-size: inherit;\n    }\n    .theme-toggle-wrapper {\n        align-items: center;\n        display: inline-flex;\n        gap: 0.5rem;\n        margin-left: 10px;\n    }\n    .theme-toggle-wrapper > button {\n        background-color: var(--bux-switch-bg-color);\n        border: none;\n        border-radius: calc(var(--bux-switch-height) / 2);\n        cursor: pointer;\n        height: var(--bux-switch-height);\n        padding: 0;\n        position: relative;\n        transition: background-color 0.3s ease;\n        width: var(--bux-switch-width);\n    }\n    .theme-toggle-wrapper .toggle-thumb {\n        background: var(--bux-switch-thumb-color);\n        border-radius: 50%;\n        height: calc(var(--bux-switch-height) - 4px);\n        left: 2px;\n        position: absolute;\n        top: 2px;\n        transition: transform 0.3s ease;\n        width: calc(var(--bux-switch-height) - 4px);\n        transform: var(--toggle-shift, translateX(0));\n    }\n    .theme-toggle-wrapper .default-emoji {\n        font-size: var(--bux-switch-emoji-size);\n        position: relative;\n        top: -2px;\n    }\n\n    \n\n</style>\n<div class="theme-toggle-wrapper">\n    <span class="theme-icon" aria-hidden="true">\n        <span class="default-emoji" part="default-light"></span>\n        <slot name="light-icon"></slot>\n    </span>\n    <button type="button" title="Switch theme" aria-label="Activate dark mode">\n        <span class="toggle-thumb" aria-hidden="true"></span>\n    </button>\n    <span class="theme-icon" aria-hidden="true">\n        <span class="default-emoji" part="default-dark"></span>\n        <slot name="dark-icon"></slot>\n    </span>\n</div>\n';const e={en:{light:"Activate light mode",dark:"Activate dark mode"},fr:{light:"Activer le mode clair",dark:"Activer le mode sombre"},es:{light:"Activar modo claro",dark:"Activar modo oscuro"},de:{light:"Hellmodus aktivieren",dark:"Dunkelmodus aktivieren"},ja:{light:"ライトモードを有効にする",dark:"ダークモードを有効にする"},ru:{light:"Включить светлый режим",dark:"Включить тёмный режим"},pt:{light:"Ativar modo claro",dark:"Ativar modo escuro"},it:{light:"Attiva modalità chiara",dark:"Attiva modalità scura"},nl:{light:"Lichte modus inschakelen",dark:"Donkere modus inschakelen"}};class a extends HTMLElement{static get observedAttributes(){return["data-label-dark","data-label-light","target","lang"]}constructor(){super(),this.button=null}connectedCallback(){const e=!this.hasAttribute("no-shadow");this.root=e?this.attachShadow({mode:"open"}):this;const a=t.content.cloneNode(!0);this.root.appendChild(a),this.button=this.root.querySelector("button"),this.button?.addEventListener("click",this.toggleTheme.bind(this)),this.initializeTheme(),requestAnimationFrame((()=>this.handleSlotFallbacks()))}attributeChangedCallback(t,e,a){["data-label-dark","data-label-light","lang"].includes(t)&&this.updateButtonLabel()}handleSlotFallbacks(){["light-icon","dark-icon"].forEach((t=>{const e=this.root.querySelector(`slot[name="${t}"]`);if(e){const a=document.createElement("span");a.className="default-emoji",a.textContent="light-icon"===t?"☀️":"🌙";const n=()=>{0===e.assignedNodes().length&&e.isConnected&&e.replaceWith(a)};n(),e.addEventListener("slotchange",n)}}))}getLang(){return this.getAttribute("lang")||document.documentElement.getAttribute("lang")||"en"}getThemeTarget(){const t=this.getAttribute("target");return t&&document.querySelector(t)||document.documentElement}toggleTheme(){const t="dark"===this.getThemeTarget().getAttribute("data-theme")?"light":"dark";localStorage.setItem("theme",t),this.applyTheme(t)}applyTheme(t){this.getThemeTarget().setAttribute("data-theme",t),this.style.setProperty("--toggle-shift","dark"===t?"translateX(calc(var(--bux-switch-width) - var(--bux-switch-height)))":"translateX(0)"),this.updateButtonLabel(),function(t=document.documentElement){const e="dark"===t.getAttribute("data-theme");document.querySelectorAll("img.has-dark").forEach((t=>{const a=t.dataset.src||t.getAttribute("src")||"";t.dataset.src||(t.dataset.src=a),t.src=e?a.replace(/(\.\w+)$/,"-dark$1"):t.dataset.src}))}(this.getThemeTarget()),this.dispatchEvent(new CustomEvent("theme-change",{detail:{theme:t},bubbles:!0,composed:!0}))}updateButtonLabel(){if(!this.button)return;const t=this.getThemeTarget().getAttribute("data-theme"),a=this.getLang(),n=e[a]||e.en,i=this.getAttribute("data-label-dark")||n.light,r=this.getAttribute("data-label-light")||n.dark,s="dark"===t?i:r;this.button.setAttribute("aria-label",s),this.button.setAttribute("aria-pressed","dark"===t?"true":"false")}isThemeMode(t){return"light"===t||"dark"===t}initializeTheme(){const t=localStorage.getItem("theme"),e=window.matchMedia("(prefers-color-scheme: dark)").matches,a=t||(e?"dark":"light");this.isThemeMode(a)?this.applyTheme(a):this.applyTheme("light"),t||window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(t=>{const e=t.matches?"dark":"light";this.applyTheme(e)}))}}customElements.define("browserux-theme-switcher",a)}));
